// Generated by dia2code
#ifndef ENGINE__ENGINE__H
#define ENGINE__ENGINE__H

#include <vector>
#include <memory>
#include <mutex>
#include <json/json.h>
#include <stack>

namespace state {
  class State;
};
namespace engine {
  class Command;
  class Action;
}

#include "state/State.h"
#include "Action.h"
#include "Command.h"

namespace engine {

  /// class Engine - 
  class Engine {
    // Associations
    // Attributes
  public:
    state::State currentState;
    std::vector<std::unique_ptr<Command> > currentCommands;
    std::mutex lockEngine;
    Json::Value record;
    // Operations
  public:
    Engine ();
    void addCommand (Command* cmd);
    std::stack<std::shared_ptr<Action>> update ();
    const state::State& getState () const;
    void undo (std::stack<std::shared_ptr<Action>>& actions);
    void run ();
    void updaterecord ();
    // Setters and Getters
  };

};

#endif
