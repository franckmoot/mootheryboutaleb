// Generated by dia2code
#ifndef AI__PATHMAP__H
#define AI__PATHMAP__H

#include <vector>
#include <queue>

namespace state {
  class ElementTab;
};
namespace ai {
  class Point;
  class PointCompareWeight;
}

#include "Direction.h"
#include "Point.h"
#include "state/ElementTab.h"
#include "PointCompareWeight.h"

namespace ai {

  /// class Pathmap - 
  class Pathmap {
    // Attributes
  private:
    int width     = 0;
    int height     = 0;
  protected:
    std::vector<int> weights;
    std::priority_queue<Point, std::vector<Point>,PointCompareWeight> queue;
    std::vector<Direction>  directions;
    // Operations
  public:
    Pathmap ();
    virtual void init (state::ElementTab& grid) = 0;
    void addSink (Point p);
    void update (const state::ElementTab& grid);
    bool isWall (Point p);
    void chgWeights (Point p);
    int getWeights (Point p);
    int getPoidlist (int i);
    // Setters and Getters
    void setWeights(const std::vector<int>& weights);
    const std::priority_queue<Point, std::vector<Point>,PointCompareWeight>& getQueue() const;
    void setQueue(const std::priority_queue<Point, std::vector<Point>,PointCompareWeight>& queue);
    const std::vector<Direction> & getDirections() const;
    void setDirections(const std::vector<Direction> & directions);
  };

};

#endif
